#include "CurieIMU.h"
//#include <util/atomic.h>

// Knock reading properties
const unsigned long KNOCK_LISTEN_TIMEOUT = 3000;   // 50000 ms = 5 seconds
const unsigned long minKnockInterval = 200;              // 100 ms    // Might want to make this 150ms
volatile unsigned long prevKnockTime = 0;

// Saved Knocks
const unsigned long MAX_KNOCKS = 5;
volatile unsigned long savedKnocksIntervals[MAX_KNOCKS];
volatile unsigned int savedKnocksLen = 0;

// Reading Knocks
volatile unsigned long currKnockIntervals[MAX_KNOCKS];
volatile unsigned int currKnockIndex = 0;                // Used to denote current position in currKnockIntervals and the size of the array after population

// Mapping constants
const unsigned long RANGE_LOW = 0;
const unsigned long RANGE_HIGH = 100;
const unsigned long MAX_PERCENT_TOLERANCE = 25;        // Percent difference allowed for valid knock checking. TODO: may need tweaking
const unsigned long AVE_PERCENT_TOlERANCE = 25;        // Average percent difference allowed for valid knock checking. TODO: may need tweaking

// States
const byte STATE_IDLE = 0, STATE_LISTEN = 1, STATE_ANALYZE = 2;
volatile byte currState = STATE_IDLE;

// LED pins
const unsigned int PIN_ONBOARD_LED = 13;

// Debugging
const boolean DEBUG = true;
boolean DEBUG_SAVE_KNOCK = true;

void printKnocks (volatile unsigned long knocks[], volatile unsigned int len) {
  if (!DEBUG) return;
  // Testing: printing array of times
  Serial.print("[");
  unsigned int i;
  for (i = 0; i < len; i++) {
    Serial.print(knocks[i]);
    if (i < len - 1) Serial.print(", ");
  }
  Serial.println("]");
}

// End Debugging

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  while (!Serial);

  CurieIMU.begin();
  CurieIMU.attachInterrupt(readKnock);
  CurieIMU.setDetectionThreshold(CURIE_IMU_SHOCK, 1000);  // 10 mg
  CurieIMU.setDetectionDuration(CURIE_IMU_SHOCK, 1000);  // 200 ms
  CurieIMU.interrupts(CURIE_IMU_SHOCK);

  // Set up pins
  pinMode(PIN_ONBOARD_LED, OUTPUT);

  Serial.println("Started");
}

void preProcessKnocks() {
  /** Preprocess knocks by mapping interval values to an arbitrary range (RANGE_LOW to RANGE_HIGH) **/

  unsigned int i;
  unsigned long currInter;

  //  Find the lowest and highest interval values
  unsigned long low = KNOCK_LISTEN_TIMEOUT;       // This is the maximum possible interval value
  unsigned long high = 0;                         // This is the lowest possible interval value

  for (i = 0; i < currKnockIndex; ++i) {
    currInter = currKnockIntervals[i];
    if (currInter < low) low = currInter;
    if (currInter > high) high = currInter;
  }

  // Map values from RANGE_LOW to RANGE_HIGH
  for (i = 0; i < currKnockIndex; ++i) {
    currKnockIntervals[i] = map(currKnockIntervals[i], low, high, RANGE_LOW, RANGE_HIGH);
  }
}

void saveKnocks() {
  savedKnocksLen = currKnockIndex;
  unsigned int i = 0;
  for (i = 0; i < savedKnocksLen; ++i) {
    savedKnocksIntervals[i] = currKnockIntervals[i];
  }
  //  memcpy(savedKnocksIntervals, currKnockIntervals, currKnockIndex);
}

boolean checkKnockPattern() {

  // First check if the number of knocks are the same
  if (currKnockIndex != savedKnocksLen) {
    Serial.println("Failing because lengths don't match");
    return false;
  }

  printKnocks(savedKnocksIntervals, savedKnocksLen);
  printKnocks(currKnockIntervals, currKnockIndex);

  unsigned int i;
  unsigned long percDiff;
  unsigned long totalDiff = 0;
  for (i = 0; i < currKnockIndex; ++i) {
    percDiff = abs(savedKnocksIntervals[i] - currKnockIntervals[i]);
    if (percDiff > MAX_PERCENT_TOLERANCE) return false;
    totalDiff += percDiff;
  }

  // Check if the total average time differences are acceptable
  if ((totalDiff > currKnockIndex) > AVE_PERCENT_TOlERANCE) return false;

  // Otherwise, we're good!
  return true;
}

void showSuccess() {
  Serial.println("Success");
  digitalWrite(PIN_ONBOARD_LED, HIGH);
  delay(1000);
  digitalWrite(PIN_ONBOARD_LED, LOW);
}

void showFailure() {
  Serial.println("Failure");
  int i = 0;
  for (i = 0; i < 10; ++i) {
    digitalWrite(PIN_ONBOARD_LED, HIGH);
    delay(200);
    digitalWrite(PIN_ONBOARD_LED, LOW);
  }
}

void unlockDoor() {
  Serial.println("Unlocking door");
}

void analyzeKnock() {
  noInterrupts();
  Serial.println("Analyzing knock");

  printKnocks(currKnockIntervals, currKnockIndex);

  // Pre process knocks to apply appropriate interval
  preProcessKnocks();

  printKnocks(currKnockIntervals, currKnockIndex);

  // Check if we were saving a new knock
  if (DEBUG_SAVE_KNOCK) {
    saveKnocks();
    DEBUG_SAVE_KNOCK = false;
  } else {
    if (checkKnockPattern() == true) {
      showSuccess();
      unlockDoor();
    }
    else {
      showFailure();
    }
  }

  currState = STATE_IDLE;

  interrupts();
}

void loop() {
  unsigned long tn = millis();
  //  Serial.println(tn);
  if (CurieIMU.getInterruptStatus(CURIE_IMU_SHOCK)) {
    Serial.print("Shock loop received at time: ");
    Serial.println(tn);
  } else return;

  //  noInterrupts();     // TODO: We may have to remove this

  //  Serial.print("currState is ");
  //  switch (currState) {
  //    case STATE_IDLE: Serial.println("STATE_IDLE"); break;
  //    case STATE_LISTEN: Serial.println("STATE_LISTEN"); break;
  //    case STATE_ANALYZE: Serial.println("STATE_ANALYZE"); break;
  //  }


  //  if (CurieIMU.getInterruptStatus(CURIE_IMU_SHOCK))  {
  //    Serial.print("Exiting loop because a shock interrupt has occurred at time ");
  //    Serial.println(millis());
  //    return;
  //  }
  //
  //  /* Check timeout */
  //
  //  // Set the time now
  //  unsigned long timenow = millis();
  ////  Serial.println(timenow);
  //
  //  switch (currState) {
  //    case STATE_IDLE:  // If we're idling, then just continue looping
  //      return;
  //    case STATE_ANALYZE:
  //      Serial.println("Entering analysis from loop from analysis state");
  //      analyzeKnock();
  //      break;
  //    case STATE_LISTEN:
  //      if (timenow - prevKnockTime > KNOCK_LISTEN_TIMEOUT) {
  //        Serial.println("Entering analysis from loop from listening timeout");
  //        currState = STATE_ANALYZE;
  //        analyzeKnock();
  //      }
  //      break;
  //  }

  //  interrupts();     // TODO: We may have to remove this
}

static void readKnock(void) {

  Serial.print("Shock interrupt received at time: ");
  Serial.println(millis());
  //  delay(500);
  //  noInterrupts();     // TODO: We may have to remove this

  //  unsigned long tn = millis();
  //  unsigned long timediff = tn - prevKnockTime;
  //  if (CurieIMU.getInterruptStatus(CURIE_IMU_SHOCK) && (timediff > minKnockInterval)) {
  //    Serial.print("shock detected at time ");
  //    Serial.println(tn);
  //
  //    //  Check currState
  //    switch (currState) {
  //      case STATE_ANALYZE:    // If we are analyzing at the moment (!idle && !listening), then don't accept any knocks
  //        return;
  //      case STATE_IDLE:      // If we are idle, we have received our first knock, and should thus start listening
  //        currState = STATE_LISTEN;
  //        currKnockIndex = 0;
  //        prevKnockTime = tn;
  //        return;             // We should return because every element in the array is the time difference between every PAIR of knocks
  //      case STATE_LISTEN:    // If we are already listening, we want to check if this knock occurred after our timeout, and should thus be switched to STATE_ANALYZE
  //        if (timediff > KNOCK_LISTEN_TIMEOUT) {
  //          Serial.println("Setting analysis from knock interrupt");
  //          currState = STATE_ANALYZE;
  //          return;
  //        }
  //    }
  //
  //    /** If we get here, we should add the knock time interval to the array **/
  //    prevKnockTime = tn;
  //
  //    // Check if the current knock count is past our max. THIS IS AN ERROR, SHOULD NOT HAPPEN
  //    if (currKnockIndex >= MAX_KNOCKS) {
  //      Serial.print("ERROR: currKnockIndex (");
  //      Serial.print(currKnockIndex);
  //      Serial.println(") has reached MAX_KNOCKS!");
  //      return;
  //    }
  //
  //    // Otherwise, add the knock to the intervals list
  //    currKnockIntervals[currKnockIndex] = timediff;
  //    currKnockIndex++;
  //
  //    // If we are at the last knock, then set state to analysis mode
  //    if (currKnockIndex == MAX_KNOCKS) {
  //      Serial.println("Setting analysis after knock interrupt");
  //      currState = STATE_ANALYZE;
  //    }
  //
  //    //    if (CurieIMU.shockDetected(X_AXIS, POSITIVE))
  //    //      Serial.println("Negative shock detected on X-axis");
  //    //    if (CurieIMU.shockDetected(X_AXIS, NEGATIVE))
  //    //      Serial.println("Positive shock detected on X-axis");
  //    //    if (CurieIMU.shockDetected(Y_AXIS, POSITIVE))
  //    //      Serial.println("Negative shock detected on Y-axis");
  //    //    if (CurieIMU.shockDetected(Y_AXIS, NEGATIVE))
  //    //      Serial.println("Positive shock detected on Y-axis");
  //    //    if (CurieIMU.shockDetected(Z_AXIS, POSITIVE))
  //    //      Serial.println("Negative shock detected on Z-axis");
  //    //    if (CurieIMU.shockDetected(Z_AXIS, NEGATIVE))
  //    //      Serial.println("Positive shock detected on Z-axis");
  //  }

  //  interrupts();     // TODO: We may have to remove this
}


